
DEMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  0000069a  0000072e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800130  00800130  0000075e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000075e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e7e  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a9  00000000  00000000  000016d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069b  00000000  00000000  0000207f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  00002940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000069d  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000354d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_13>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_18>
  4c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_19>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	7c 02       	muls	r23, r28
  6a:	7e 02       	muls	r23, r30
  6c:	80 02       	muls	r24, r16
  6e:	82 02       	muls	r24, r18
  70:	84 02       	muls	r24, r20
  72:	8b 02       	muls	r24, r27
  74:	92 02       	muls	r25, r18

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ea e9       	ldi	r30, 0x9A	; 154
  8a:	f6 e0       	ldi	r31, 0x06	; 6
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a0 33       	cpi	r26, 0x30	; 48
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e3       	ldi	r26, 0x30	; 48
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 37       	cpi	r26, 0x79	; 121
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
  ac:	0c 94 4b 03 	jmp	0x696	; 0x696 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <fsm_random>:
extern uint8_t rand8_asm(uint8_t current);

/* Functions ---------------------------------------------------------*/
/* Call assembly functions to generate psudo-random values. */
void fsm_random(void)
{
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	00 d0       	rcall	.+0      	; 0xba <fsm_random+0x6>
  ba:	00 d0       	rcall	.+0      	; 0xbc <fsm_random+0x8>
  bc:	1f 92       	push	r1
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
    static uint16_t values = 0;
    static uint8_t last = 0;
    static uint8_t new = 0;
    char uart_string[5];

    switch (current_state) {
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	91 05       	cpc	r25, r1
  ce:	c1 f1       	breq	.+112    	; 0x140 <fsm_random+0x8c>
  d0:	18 f4       	brcc	.+6      	; 0xd8 <fsm_random+0x24>
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	e9 f0       	breq	.+58     	; 0x110 <fsm_random+0x5c>
  d6:	4b c0       	rjmp	.+150    	; 0x16e <fsm_random+0xba>
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	91 05       	cpc	r25, r1
  dc:	b1 f1       	breq	.+108    	; 0x14a <fsm_random+0x96>
  de:	04 97       	sbiw	r24, 0x04	; 4
  e0:	09 f0       	breq	.+2      	; 0xe4 <fsm_random+0x30>
  e2:	45 c0       	rjmp	.+138    	; 0x16e <fsm_random+0xba>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  e4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
  e8:	4a e0       	ldi	r20, 0x0A	; 10
  ea:	be 01       	movw	r22, r28
  ec:	6f 5f       	subi	r22, 0xFF	; 255
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 16 03 	call	0x62c	; 0x62c <__itoa_ncheck>
        break;

    // Send pseudo-random value to UART
    case UART_STATE:
        itoa(new, uart_string, 10);
        uart_puts(" "); uart_puts(uart_string);
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 90 01 	call	0x320	; 0x320 <uart_puts>
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 90 01 	call	0x320	; 0x320 <uart_puts>
        last = new;
 106:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 10a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <last.1831>
 10e:	2f c0       	rjmp	.+94     	; 0x16e <fsm_random+0xba>
    static uint8_t new = 0;
    char uart_string[5];

    switch (current_state) {
    case IDLE_STATE:
        if (values < 20) {
 110:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <values.1830>
 114:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <values.1830+0x1>
 118:	84 31       	cpi	r24, 0x14	; 20
 11a:	91 05       	cpc	r25, r1
 11c:	18 f4       	brcc	.+6      	; 0x124 <fsm_random+0x70>
            current_state = RAND4_STATE;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	27 c0       	rjmp	.+78     	; 0x172 <fsm_random+0xbe>
        } else if (values < 100) {
 124:	84 36       	cpi	r24, 0x64	; 100
 126:	91 05       	cpc	r25, r1
 128:	40 f5       	brcc	.+80     	; 0x17a <fsm_random+0xc6>
            if (values == 20) {
 12a:	44 97       	sbiw	r24, 0x14	; 20
 12c:	31 f4       	brne	.+12     	; 0x13a <fsm_random+0x86>
                last = 0;
 12e:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <last.1831>
                uart_puts("\r\n\r\n");
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 90 01 	call	0x320	; 0x320 <uart_puts>
            }
            current_state = RAND8_STATE;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	19 c0       	rjmp	.+50     	; 0x172 <fsm_random+0xbe>
        }
        break;

    // Call 4-bit LFSR generator
    case RAND4_STATE:
        new = rand4_asm(last);
 140:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <last.1831>
 144:	0e 94 d6 02 	call	0x5ac	; 0x5ac <rand4_asm>
 148:	04 c0       	rjmp	.+8      	; 0x152 <fsm_random+0x9e>
        current_state = UART_STATE;
        break;

    // Call 8-bit LFSR generator
    case RAND8_STATE:
        new = rand8_asm(last);
 14a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <last.1831>
 14e:	0e 94 e5 02 	call	0x5ca	; 0x5ca <rand8_asm>
 152:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
        values++;
 156:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <values.1830>
 15a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <values.1830+0x1>
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <values.1830+0x1>
 164:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <values.1830>
        current_state = UART_STATE;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <fsm_random+0xbe>
        last = new;
        current_state = IDLE_STATE;
        break;

    default:
        current_state = IDLE_STATE;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    }
}
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <__vector_13>:

/* Interrupts --------------------------------------------------------*/
/* Timer1 overflow interrupt routine.
 * Update state of the FSM. */
ISR(TIMER1_OVF_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
    fsm_random();
 1ac:	0e 94 5a 00 	call	0xb4	; 0xb4 <fsm_random>
    burst_asm(2);
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <burst_asm>
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 1ec:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 1f0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 1f4:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1f6:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <UART_RxHead>
 1fa:	ef 5f       	subi	r30, 0xFF	; 255
 1fc:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 1fe:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <UART_RxTail>
 202:	e2 17       	cp	r30, r18
 204:	39 f0       	breq	.+14     	; 0x214 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 206:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e7 5c       	subi	r30, 0xC7	; 199
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	90 83       	st	Z, r25
 212:	01 c0       	rjmp	.+2      	; 0x216 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 214:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 216:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <UART_LastRxError>
 21a:	89 2b       	or	r24, r25
 21c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <UART_LastRxError>
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 246:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <UART_TxHead>
 24a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <UART_TxTail>
 24e:	98 17       	cp	r25, r24
 250:	69 f0       	breq	.+26     	; 0x26c <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 252:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <UART_TxTail>
 256:	ef 5f       	subi	r30, 0xFF	; 255
 258:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 25a:	e0 93 37 01 	sts	0x0137, r30	; 0x800137 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	e7 5a       	subi	r30, 0xA7	; 167
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	80 81       	ld	r24, Z
 266:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 26a:	05 c0       	rjmp	.+10     	; 0x276 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 26c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 270:	8f 7d       	andi	r24, 0xDF	; 223
 272:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
 276:	ff 91       	pop	r31
 278:	ef 91       	pop	r30
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 288:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <UART_TxHead>
    UART_TxTail = 0;
 28c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <UART_TxTail>
    UART_RxHead = 0;
 290:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <UART_RxHead>
    UART_RxTail = 0;
 294:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 298:	97 ff       	sbrs	r25, 7
 29a:	03 c0       	rjmp	.+6      	; 0x2a2 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 29c:	22 e0       	ldi	r18, 0x02	; 2
 29e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 2a2:	90 78       	andi	r25, 0x80	; 128
 2a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 2a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 2ac:	88 e9       	ldi	r24, 0x98	; 152
 2ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2b8:	08 95       	ret

000002ba <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
 2ba:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <UART_RxHead>
 2be:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <UART_RxTail>
 2c2:	98 17       	cp	r25, r24
 2c4:	a9 f0       	breq	.+42     	; 0x2f0 <uart_getc+0x36>
    {
        return UART_NO_DATA; /* no data available */
    }

    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2c6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <UART_RxTail>
 2ca:	9f 5f       	subi	r25, 0xFF	; 255
 2cc:	9f 71       	andi	r25, 0x1F	; 31

    /* get data from receive buffer */
    data        = UART_RxBuf[tmptail];
 2ce:	e9 2f       	mov	r30, r25
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	e7 5c       	subi	r30, 0xC7	; 199
 2d4:	fe 4f       	sbci	r31, 0xFE	; 254
 2d6:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 2d8:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <UART_LastRxError>

    /* store buffer index */
    UART_RxTail = tmptail;
 2dc:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <UART_RxTail>

    UART_LastRxError = 0;
 2e0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <UART_LastRxError>
    return (lastRxError << 8) + data;
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	98 2f       	mov	r25, r24
 2e8:	88 27       	eor	r24, r24
 2ea:	82 0f       	add	r24, r18
 2ec:	91 1d       	adc	r25, r1
 2ee:	08 95       	ret
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
    {
        return UART_NO_DATA; /* no data available */
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	91 e0       	ldi	r25, 0x01	; 1
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2f4:	08 95       	ret

000002f6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2f6:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <UART_TxHead>
 2fa:	9f 5f       	subi	r25, 0xFF	; 255
 2fc:	9f 71       	andi	r25, 0x1F	; 31

    while (tmphead == UART_TxTail)
 2fe:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <UART_TxTail>
 302:	92 17       	cp	r25, r18
 304:	e1 f3       	breq	.-8      	; 0x2fe <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 306:	e9 2f       	mov	r30, r25
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	e7 5a       	subi	r30, 0xA7	; 167
 30c:	fe 4f       	sbci	r31, 0xFE	; 254
 30e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 310:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 314:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 318:	80 62       	ori	r24, 0x20	; 32
 31a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 31e:	08 95       	ret

00000320 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
    while (*s)
 326:	89 91       	ld	r24, Y+
 328:	88 23       	and	r24, r24
 32a:	19 f0       	breq	.+6      	; 0x332 <uart_puts+0x12>
        uart_putc(*s++);
 32c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <uart_putc>
 330:	fa cf       	rjmp	.-12     	; 0x326 <uart_puts+0x6>
}/* uart_puts */
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	08 95       	ret

00000338 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 33e:	84 91       	lpm	r24, Z
 340:	ef 01       	movw	r28, r30
 342:	21 96       	adiw	r28, 0x01	; 1
 344:	88 23       	and	r24, r24
 346:	21 f0       	breq	.+8      	; 0x350 <uart_puts_p+0x18>
        uart_putc(c);
 348:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <uart_putc>
 34c:	fe 01       	movw	r30, r28
 34e:	f7 cf       	rjmp	.-18     	; 0x33e <uart_puts_p+0x6>
}/* uart_puts_p */
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <twi_init>:

/* Functions ---------------------------------------------------------*/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 356:	87 b1       	in	r24, 0x07	; 7
 358:	8f 7c       	andi	r24, 0xCF	; 207
 35a:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 35c:	88 b1       	in	r24, 0x08	; 8
 35e:	80 63       	ori	r24, 0x30	; 48
 360:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 362:	e9 eb       	ldi	r30, 0xB9	; 185
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	8c 7f       	andi	r24, 0xFC	; 252
 36a:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 36c:	88 e9       	ldi	r24, 0x98	; 152
 36e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 372:	08 95       	ret

00000374 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 374:	94 ea       	ldi	r25, 0xA4	; 164
 376:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 37a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 37e:	97 ff       	sbrs	r25, 7
 380:	fc cf       	rjmp	.-8      	; 0x37a <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 382:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 386:	84 e8       	ldi	r24, 0x84	; 132
 388:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 38c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 390:	87 ff       	sbrs	r24, 7
 392:	fc cf       	rjmp	.-8      	; 0x38c <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 394:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 398:	98 7f       	andi	r25, 0xF8	; 248
    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
        if (twi_response == 0x18 || twi_response == 0x40) {
 39a:	98 31       	cpi	r25, 0x18	; 24
 39c:	19 f0       	breq	.+6      	; 0x3a4 <twi_start+0x30>
        return 0;   /* Slave device accessible */
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 34       	cpi	r25, 0x40	; 64
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <twi_start+0x32>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
    }
    else {
        return 1;   /* Failed to access slave device */
    }
}
 3a6:	08 95       	ret

000003a8 <twi_write>:


/*--------------------------------------------------------------------*/
void twi_write(uint8_t data)
{
    TWDR = data;
 3a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 3ac:	84 e8       	ldi	r24, 0x84	; 132
 3ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 3b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3b6:	87 ff       	sbrs	r24, 7
 3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <twi_write+0xa>
}
 3ba:	08 95       	ret

000003bc <twi_read_ack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_ack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 3bc:	84 ec       	ldi	r24, 0xC4	; 196
 3be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 3c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3c6:	87 ff       	sbrs	r24, 7
 3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <twi_read_ack+0x6>
	return (TWDR);
 3ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 3ce:	08 95       	ret

000003d0 <twi_read_nack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_nack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
 3d0:	84 e8       	ldi	r24, 0x84	; 132
 3d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 3d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3da:	87 ff       	sbrs	r24, 7
 3dc:	fc cf       	rjmp	.-8      	; 0x3d6 <twi_read_nack+0x6>
	return (TWDR);
 3de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 3e2:	08 95       	ret

000003e4 <twi_stop>:


/*--------------------------------------------------------------------*/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 3e4:	84 e9       	ldi	r24, 0x94	; 148
 3e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3ea:	08 95       	ret

000003ec <TIM_config_prescaler>:
/* Functions ---------------------------------------------------------*/
void TIM_config_prescaler(uint8_t timer_name,
                          uint8_t presc_val)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
 3ec:	81 11       	cpse	r24, r1
 3ee:	31 c0       	rjmp	.+98     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
        switch (presc_val) {
 3f0:	63 30       	cpi	r22, 0x03	; 3
 3f2:	f9 f0       	breq	.+62     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3f4:	50 f4       	brcc	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f6:	66 23       	and	r22, r22
 3f8:	79 f0       	breq	.+30     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3fa:	61 30       	cpi	r22, 0x01	; 1
 3fc:	39 f5       	brne	.+78     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 3fe:	85 b5       	in	r24, 0x25	; 37
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS01);
 404:	85 b5       	in	r24, 0x25	; 37
 406:	82 60       	ori	r24, 0x02	; 2
 408:	0f c0       	rjmp	.+30     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
void TIM_config_prescaler(uint8_t timer_name,
                          uint8_t presc_val)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (presc_val) {
 40a:	65 30       	cpi	r22, 0x05	; 5
 40c:	41 f0       	breq	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 40e:	66 30       	cpi	r22, 0x06	; 6
 410:	e9 f4       	brne	.+58     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR0B = TCCR0B |  _BV(CS02);
 412:	85 b5       	in	r24, 0x25	; 37
 414:	84 60       	ori	r24, 0x04	; 4
 416:	13 c0       	rjmp	.+38     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 418:	85 b5       	in	r24, 0x25	; 37
 41a:	8b 7f       	andi	r24, 0xFB	; 251
 41c:	10 c0       	rjmp	.+32     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
                TCCR0B = TCCR0B |  _BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR0B = TCCR0B |  _BV(CS02);
 41e:	85 b5       	in	r24, 0x25	; 37
 420:	84 60       	ori	r24, 0x04	; 4
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR0B = TCCR0B & ~_BV(CS02);
 422:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS01);
 424:	85 b5       	in	r24, 0x25	; 37
 426:	8d 7f       	andi	r24, 0xFD	; 253
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR0B = TCCR0B & ~_BV(CS02);
                TCCR0B = TCCR0B |  _BV(CS01);
 428:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS00);
 42a:	85 b5       	in	r24, 0x25	; 37
 42c:	8e 7f       	andi	r24, 0xFE	; 254
 42e:	85 bd       	out	0x25, r24	; 37
                break;
 430:	08 95       	ret
            case TIM_PRESC_64:
                /* 011 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 432:	85 b5       	in	r24, 0x25	; 37
 434:	8b 7f       	andi	r24, 0xFB	; 251
 436:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS01);
 438:	85 b5       	in	r24, 0x25	; 37
 43a:	82 60       	ori	r24, 0x02	; 2
 43c:	03 c0       	rjmp	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR0B = TCCR0B |  _BV(CS02);
 43e:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS01);
 440:	85 b5       	in	r24, 0x25	; 37
 442:	8d 7f       	andi	r24, 0xFD	; 253
 444:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS00);
 446:	85 b5       	in	r24, 0x25	; 37
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	f1 cf       	rjmp	.-30     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR0B = TCCR0B & ~_BV(CS02);
 44c:	85 b5       	in	r24, 0x25	; 37
 44e:	8b 7f       	andi	r24, 0xFB	; 251
 450:	e8 cf       	rjmp	.-48     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	09 f0       	breq	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	44 c0       	rjmp	.+136    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
        switch (presc_val) {
 458:	63 30       	cpi	r22, 0x03	; 3
 45a:	d1 f0       	breq	.+52     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 45c:	68 f4       	brcc	.+26     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 45e:	66 23       	and	r22, r22
 460:	99 f0       	breq	.+38     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 462:	61 30       	cpi	r22, 0x01	; 1
 464:	69 f5       	brne	.+90     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B |  _BV(CS10);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 466:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 46a:	8b 7f       	andi	r24, 0xFB	; 251
 46c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS11);
 470:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 474:	82 60       	ori	r24, 0x02	; 2
 476:	2c c0       	rjmp	.+88     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
                TCCR0B = TCCR0B & ~_BV(CS00);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (presc_val) {
 478:	65 30       	cpi	r22, 0x05	; 5
 47a:	99 f0       	breq	.+38     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 47c:	66 30       	cpi	r22, 0x06	; 6
 47e:	01 f5       	brne	.+64     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR1B = TCCR1B |  _BV(CS12);
 480:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 484:	84 60       	ori	r24, 0x04	; 4
 486:	11 c0       	rjmp	.+34     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 488:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 48c:	8b 7f       	andi	r24, 0xFB	; 251
 48e:	0d c0       	rjmp	.+26     	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
                TCCR1B = TCCR1B |  _BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_64:
                /* 011 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 490:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 494:	8b 7f       	andi	r24, 0xFB	; 251
 496:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS11);
 49a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
                TCCR1B = TCCR1B |  _BV(CS10);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR1B = TCCR1B |  _BV(CS12);
 4a2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4a6:	84 60       	ori	r24, 0x04	; 4
 4a8:	0e c0       	rjmp	.+28     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR1B = TCCR1B |  _BV(CS12);
 4aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS11);
 4ae:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4b2:	8d 7f       	andi	r24, 0xFD	; 253
 4b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS10);
 4b8:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4bc:	81 60       	ori	r24, 0x01	; 1
 4be:	0d c0       	rjmp	.+26     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR1B = TCCR1B & ~_BV(CS12);
 4c0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4c4:	8b 7f       	andi	r24, 0xFB	; 251
 4c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS11);
 4ca:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4ce:	8d 7f       	andi	r24, 0xFD	; 253
 4d0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS10);
 4d4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4d8:	8e 7f       	andi	r24, 0xFE	; 254
 4da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4de:	08 95       	ret
        }
    }
    /* Timer/Counter2 */
    else {
        switch (presc_val) {
 4e0:	86 2f       	mov	r24, r22
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	87 30       	cpi	r24, 0x07	; 7
 4e6:	91 05       	cpc	r25, r1
 4e8:	48 f5       	brcc	.+82     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 4ea:	fc 01       	movw	r30, r24
 4ec:	ec 5c       	subi	r30, 0xCC	; 204
 4ee:	ff 4f       	sbci	r31, 0xFF	; 255
                TCCR2B = TCCR2B |  _BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_1024:
                /* 111 */
                TCCR2B = TCCR2B |  _BV(CS22);
 4f0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR1B = TCCR1B & ~_BV(CS10);
        }
    }
    /* Timer/Counter2 */
    else {
        switch (presc_val) {
 4f4:	0c 94 10 03 	jmp	0x620	; 0x620 <__tablejump2__>
            case TIM_PRESC_1:
                /* 001 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 4f8:	8b 7f       	andi	r24, 0xFB	; 251
 4fa:	07 c0       	rjmp	.+14     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 4fc:	8b 7f       	andi	r24, 0xFB	; 251
 4fe:	0c c0       	rjmp	.+24     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
                TCCR2B = TCCR2B |  _BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_32:
                /* 011 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 500:	8b 7f       	andi	r24, 0xFB	; 251
 502:	11 c0       	rjmp	.+34     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
                TCCR2B = TCCR2B |  _BV(CS21);
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_64:
                /* 100 */
                TCCR2B = TCCR2B |  _BV(CS22);
 504:	84 60       	ori	r24, 0x04	; 4
 506:	1d c0       	rjmp	.+58     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_128:
                /* 101 */
                TCCR2B = TCCR2B |  _BV(CS22);
 508:	84 60       	ori	r24, 0x04	; 4
 50a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS21);
 50e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 512:	8d 7f       	andi	r24, 0xFD	; 253
 514:	0d c0       	rjmp	.+26     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_256:
                /* 110 */
                TCCR2B = TCCR2B |  _BV(CS22);
 516:	84 60       	ori	r24, 0x04	; 4
 518:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS21);
 51c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 520:	82 60       	ori	r24, 0x02	; 2
 522:	14 c0       	rjmp	.+40     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_1024:
                /* 111 */
                TCCR2B = TCCR2B |  _BV(CS22);
 524:	84 60       	ori	r24, 0x04	; 4
 526:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS21);
 52a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 52e:	82 60       	ori	r24, 0x02	; 2
 530:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS20);
 534:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 538:	81 60       	ori	r24, 0x01	; 1
 53a:	0d c0       	rjmp	.+26     	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR2B = TCCR2B & ~_BV(CS22);
 53c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 540:	8b 7f       	andi	r24, 0xFB	; 251
 542:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS21);
 546:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 54a:	8d 7f       	andi	r24, 0xFD	; 253
 54c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS20);
 550:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 554:	8e 7f       	andi	r24, 0xFE	; 254
 556:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 55a:	08 95       	ret

0000055c <TIM_config_interrupt>:
/*--------------------------------------------------------------------*/
void TIM_config_interrupt(uint8_t timer_name,
                          uint8_t interr_mode)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
 55c:	81 11       	cpse	r24, r1
 55e:	0c c0       	rjmp	.+24     	; 0x578 <TIM_config_interrupt+0x1c>
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK0 = TIMSK0 | _BV(TOIE0);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
 560:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
void TIM_config_interrupt(uint8_t timer_name,
                          uint8_t interr_mode)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (interr_mode) {
 564:	66 23       	and	r22, r22
 566:	21 f0       	breq	.+8      	; 0x570 <TIM_config_interrupt+0x14>
 568:	61 30       	cpi	r22, 0x01	; 1
 56a:	11 f4       	brne	.+4      	; 0x570 <TIM_config_interrupt+0x14>
            case TIM_OVERFLOW_ENABLE:
                TIMSK0 = TIMSK0 | _BV(TOIE0);
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	01 c0       	rjmp	.+2      	; 0x572 <TIM_config_interrupt+0x16>
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
 570:	8e 7f       	andi	r24, 0xFE	; 254
 572:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
                break;
 576:	08 95       	ret
                /* Disable overflow interrupt */
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	61 f4       	brne	.+24     	; 0x594 <TIM_config_interrupt+0x38>
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK1 = TIMSK1 | _BV(TOIE1);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
 57c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        switch (interr_mode) {
 580:	66 23       	and	r22, r22
 582:	21 f0       	breq	.+8      	; 0x58c <TIM_config_interrupt+0x30>
 584:	61 30       	cpi	r22, 0x01	; 1
 586:	11 f4       	brne	.+4      	; 0x58c <TIM_config_interrupt+0x30>
            case TIM_OVERFLOW_ENABLE:
                TIMSK1 = TIMSK1 | _BV(TOIE1);
 588:	81 60       	ori	r24, 0x01	; 1
 58a:	01 c0       	rjmp	.+2      	; 0x58e <TIM_config_interrupt+0x32>
            case TIM_OVERFLOW_DISABLE:
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
                break;
            default:
                /* Disable overflow interrupt */
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
 58c:	8e 7f       	andi	r24, 0xFE	; 254
 58e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 592:	08 95       	ret
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK2 = TIMSK2 | _BV(TOIE2);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
 594:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
        }
    }
    /* Timer/Counter2 */
    else {
        switch (interr_mode) {
 598:	66 23       	and	r22, r22
 59a:	21 f0       	breq	.+8      	; 0x5a4 <TIM_config_interrupt+0x48>
 59c:	61 30       	cpi	r22, 0x01	; 1
 59e:	11 f4       	brne	.+4      	; 0x5a4 <TIM_config_interrupt+0x48>
            case TIM_OVERFLOW_ENABLE:
                TIMSK2 = TIMSK2 | _BV(TOIE2);
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <TIM_config_interrupt+0x4a>
            case TIM_OVERFLOW_DISABLE:
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
                break;
            default:
                /* Disable overflow interrupt */
                TIMSK2 = TIMSK2 & ~_BV(TOIE2);
 5a4:	8e 7f       	andi	r24, 0xFE	; 254
 5a6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 5aa:	08 95       	ret

000005ac <rand4_asm>:
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	83 fb       	bst	r24, 3
 5b2:	00 f9       	bld	r16, 0
 5b4:	82 fb       	bst	r24, 2
 5b6:	10 f9       	bld	r17, 0
 5b8:	01 27       	eor	r16, r17
 5ba:	88 0f       	add	r24, r24
 5bc:	00 95       	com	r16
 5be:	00 fb       	bst	r16, 0
 5c0:	80 f9       	bld	r24, 0
 5c2:	8f 70       	andi	r24, 0x0F	; 15
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <rand8_asm>:
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
 5ce:	87 fb       	bst	r24, 7
 5d0:	00 f9       	bld	r16, 0
 5d2:	85 fb       	bst	r24, 5
 5d4:	10 f9       	bld	r17, 0
 5d6:	01 27       	eor	r16, r17
 5d8:	84 fb       	bst	r24, 4
 5da:	10 f9       	bld	r17, 0
 5dc:	01 27       	eor	r16, r17
 5de:	83 fb       	bst	r24, 3
 5e0:	10 f9       	bld	r17, 0
 5e2:	01 27       	eor	r16, r17
 5e4:	88 0f       	add	r24, r24
 5e6:	00 95       	com	r16
 5e8:	00 fb       	bst	r16, 0
 5ea:	80 f9       	bld	r24, 0
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	08 95       	ret

000005f2 <burst_asm>:
 5f2:	2d 9a       	sbi	0x05, 5	; 5
 5f4:	2d 98       	cbi	0x05, 5	; 5
 5f6:	8a 95       	dec	r24
 5f8:	e1 f7       	brne	.-8      	; 0x5f2 <burst_asm>
 5fa:	08 95       	ret

000005fc <main>:
/* Main --------------------------------------------------------------*/
/* Generate a sequence of LFSR preudo-random values using 4- and 8-bit
 * structure. */
int main(void)
{
    uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU)); // 8N1
 5fc:	87 e6       	ldi	r24, 0x67	; 103
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	0e 94 44 01 	call	0x288	; 0x288 <uart_init>
    
    /* Timer1
     * TODO: Enable overflow interrupt every 33 msec. */
    TIM_config_prescaler(TIM1, TIM_PRESC_8);
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 f6 01 	call	0x3ec	; 0x3ec <TIM_config_prescaler>
    TIM_config_interrupt(TIM1, TIM_OVERFLOW_ENABLE);
 60c:	61 e0       	ldi	r22, 0x01	; 1
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	0e 94 ae 02 	call	0x55c	; 0x55c <TIM_config_interrupt>
    sei();
 614:	78 94       	sei
    uart_puts("\r\n---LFSR pseudo-random generator---\r\n");
 616:	89 e0       	ldi	r24, 0x09	; 9
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 90 01 	call	0x320	; 0x320 <uart_puts>
 61e:	ff cf       	rjmp	.-2      	; 0x61e <main+0x22>

00000620 <__tablejump2__>:
 620:	ee 0f       	add	r30, r30
 622:	ff 1f       	adc	r31, r31
 624:	05 90       	lpm	r0, Z+
 626:	f4 91       	lpm	r31, Z
 628:	e0 2d       	mov	r30, r0
 62a:	09 94       	ijmp

0000062c <__itoa_ncheck>:
 62c:	bb 27       	eor	r27, r27
 62e:	4a 30       	cpi	r20, 0x0A	; 10
 630:	31 f4       	brne	.+12     	; 0x63e <__itoa_ncheck+0x12>
 632:	99 23       	and	r25, r25
 634:	22 f4       	brpl	.+8      	; 0x63e <__itoa_ncheck+0x12>
 636:	bd e2       	ldi	r27, 0x2D	; 45
 638:	90 95       	com	r25
 63a:	81 95       	neg	r24
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	0c 94 22 03 	jmp	0x644	; 0x644 <__utoa_common>

00000642 <__utoa_ncheck>:
 642:	bb 27       	eor	r27, r27

00000644 <__utoa_common>:
 644:	fb 01       	movw	r30, r22
 646:	55 27       	eor	r21, r21
 648:	aa 27       	eor	r26, r26
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	aa 1f       	adc	r26, r26
 650:	a4 17       	cp	r26, r20
 652:	10 f0       	brcs	.+4      	; 0x658 <__utoa_common+0x14>
 654:	a4 1b       	sub	r26, r20
 656:	83 95       	inc	r24
 658:	50 51       	subi	r21, 0x10	; 16
 65a:	b9 f7       	brne	.-18     	; 0x64a <__utoa_common+0x6>
 65c:	a0 5d       	subi	r26, 0xD0	; 208
 65e:	aa 33       	cpi	r26, 0x3A	; 58
 660:	08 f0       	brcs	.+2      	; 0x664 <__utoa_common+0x20>
 662:	a9 5d       	subi	r26, 0xD9	; 217
 664:	a1 93       	st	Z+, r26
 666:	00 97       	sbiw	r24, 0x00	; 0
 668:	79 f7       	brne	.-34     	; 0x648 <__utoa_common+0x4>
 66a:	b1 11       	cpse	r27, r1
 66c:	b1 93       	st	Z+, r27
 66e:	11 92       	st	Z+, r1
 670:	cb 01       	movw	r24, r22
 672:	0c 94 3b 03 	jmp	0x676	; 0x676 <strrev>

00000676 <strrev>:
 676:	dc 01       	movw	r26, r24
 678:	fc 01       	movw	r30, r24
 67a:	67 2f       	mov	r22, r23
 67c:	71 91       	ld	r23, Z+
 67e:	77 23       	and	r23, r23
 680:	e1 f7       	brne	.-8      	; 0x67a <strrev+0x4>
 682:	32 97       	sbiw	r30, 0x02	; 2
 684:	04 c0       	rjmp	.+8      	; 0x68e <strrev+0x18>
 686:	7c 91       	ld	r23, X
 688:	6d 93       	st	X+, r22
 68a:	70 83       	st	Z, r23
 68c:	62 91       	ld	r22, -Z
 68e:	ae 17       	cp	r26, r30
 690:	bf 07       	cpc	r27, r31
 692:	c8 f3       	brcs	.-14     	; 0x686 <strrev+0x10>
 694:	08 95       	ret

00000696 <_exit>:
 696:	f8 94       	cli

00000698 <__stop_program>:
 698:	ff cf       	rjmp	.-2      	; 0x698 <__stop_program>
